{
  "language": "Solidity",
  "sources": {
    "contracts/dex/KlayswapReserve.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"../interfaces/IPairReserve.sol\";\nimport \"../interfaces/klayswap/IKlayswapExchange.sol\";\nimport \"../interfaces/klayswap/IKlayswapFactory.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract KlayswapReserve is IPairReserve, Initializable {\n\n    IKlayswapFactory public factory;\n\n    function initialize(address _factory) external initializer {\n        factory = IKlayswapFactory(_factory);\n    }\n\n    function WKLAY() external pure returns (address) {\n        return address(0);\n    }\n\n    function getReserve(address token0, address token1) external view returns (uint256 reserve0, uint256 reserve1) {\n        return _getReserve(token0, token1);\n    }\n\n    function getKlayReserve(address token) external view returns (uint256 klayReserve, uint256 tokenReserve) {\n        return _getReserve(address(0), token);\n    }\n\n    function _getReserve(address token0, address token1) internal view returns (uint256 reserve0, uint256 reserve1) {\n        address pool = factory.tokenToPool(token0, token1);\n        if (pool == address(0)) return (0, 0);\n        (uint256 _reserve0, uint256 _reserve1) = IKlayswapExchange(pool).getCurrentPool();\n\n        if (IKlayswapExchange(pool).tokenA() == token0) {\n            return (_reserve0, _reserve1);\n        } else {\n            return (_reserve1, _reserve0);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IPairReserve.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\n\ninterface IPairReserve {\n\n    function WKLAY() external view returns (address);\n\n    function getReserve(address token0, address token1) external view returns (uint256 reserve0, uint256 reserve1);\n\n    function getKlayReserve(address token) external view returns (uint256 klayReserve, uint256 tokenReserve);\n\n}\n"
    },
    "contracts/interfaces/klayswap/IKlayswapExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IKlayswapExchange is IERC20 {\n    function name() external view returns (string memory);\n\n    function tokenA() external view returns (address);\n\n    function tokenB() external view returns (address);\n\n    function getCurrentPool() external view returns (uint256, uint256);\n\n    function addKlayLiquidityWithLimit(\n        uint256 amount,\n        uint256 minAmountA,\n        uint256 minAmountB\n    ) external payable;\n\n    function grabKlayFromFactory() external payable;\n\n    function decimals() external view returns (uint8);\n\n    function addKlayLiquidity(uint256 amount) external payable;\n\n    function changeMiningRate(uint256 _mining) external;\n\n    function version() external pure returns (string memory);\n\n    function userRewardSum(address) external view returns (uint256);\n\n    function exchangeNeg(address token, uint256 amount) external returns (uint256);\n\n    function mining() external view returns (uint256);\n\n    function changeFee(uint256 _fee) external;\n\n    function miningIndex() external view returns (uint256);\n\n    function symbol() external view returns (string memory);\n\n    function removeLiquidity(uint256 amount) external;\n\n    function addKctLiquidity(uint256 amountA, uint256 amountB) external;\n\n    function lastMined() external view returns (uint256);\n\n    function claimReward() external;\n\n    function estimateNeg(address token, uint256 amount) external view returns (uint256);\n\n    function updateMiningIndex() external;\n\n    function factory() external view returns (address);\n\n    function exchangePos(address token, uint256 amount) external returns (uint256);\n\n    function addKctLiquidityWithLimit(\n        uint256 amountA,\n        uint256 amountB,\n        uint256 minAmountA,\n        uint256 minAmountB\n    ) external;\n\n    function fee() external view returns (uint256);\n\n    function estimatePos(address token, uint256 amount) external view returns (uint256);\n\n    function userLastIndex(address) external view returns (uint256);\n\n    function initPool(address to) external;\n\n    function removeLiquidityWithLimit(\n        uint256 amount,\n        uint256 minAmountA,\n        uint256 minAmountB\n    ) external;\n}\n"
    },
    "contracts/interfaces/klayswap/IKlayswapFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\ninterface IKlayswapFactory {\n    function poolExist(address pool) external view returns (bool exists);\n\n    function tokenToPool(address tokenA, address tokenB) external view returns (address pool);\n\n    function name() external view returns (string memory);\n\n    function approve(address _spender, uint256 _value) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function transfer(address _to, uint256 _value) external returns (bool);\n\n    function createFee() external view returns (uint256);\n\n    function getPoolAddress(uint256 idx) external view returns (address);\n\n    function getAmountData(uint256 si, uint256 ei)\n    external\n    view\n    returns (\n        uint256[] memory,\n        uint256[] memory,\n        uint256[] memory\n    );\n\n    function createKlayPool(\n        address token,\n        uint256 amount,\n        uint256 fee\n    ) external payable;\n\n    function createKctPool(\n        address tokenA,\n        uint256 amountA,\n        address tokenB,\n        uint256 amountB,\n        uint256 fee\n    ) external;\n\n    function exchangeKlayPos(\n        address token,\n        uint256 amount,\n        address[] calldata path\n    ) external payable;\n\n    function exchangeKctPos(\n        address tokenA,\n        uint256 amountA,\n        address tokenB,\n        uint256 amountB,\n        address[] calldata path\n    ) external;\n\n    function exchangeKlayNeg(\n        address token,\n        uint256 amount,\n        address[] calldata path\n    ) external payable;\n\n    function exchangeKctNeg(\n        address tokenA,\n        uint256 amountA,\n        address tokenB,\n        uint256 amountB,\n        address[] calldata path\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\nimport \"./libraries/FullMath.sol\";\nimport \"./interfaces/IPairReserve.sol\";\nimport \"./interfaces/IExternalOracle.sol\";\nimport \"./interfaces/IPriceOracle.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\n/// @notice 현재 시점의 유동성 크기를 기반으로 Token의 Dollar 가치 환산 컨트랙트\n/// @dev onchain liquidity를 기반으로 dollar 가치를 환산하므로,\n///      이를 기반으로 청산 로직 등 핵심 비즈니스 로직에 엮으면 oracle attack으로 인한 공격에 취약할 수 있습니다.\ncontract PriceOracle is IPriceOracle, OwnableUpgradeable {\n    uint256 public constant DECIMAL = 6;\n\n    mapping(address => bool) public isPairReserve;\n    address[] public pairReserves;\n\n    mapping(address => bool) public isStableCoin;\n    address[] public stableCoins;\n\n    mapping(address => bool) public isWklay;\n    address[] public wklays;\n\n    address public klayOracle;\n\n    function initialize() external initializer {\n        __Ownable_init();\n    }\n\n    // ============ ONLY ADMIN ==================\n    function registerPairReserve(address _pairReserve) external onlyOwner {\n        require(!isPairReserve[_pairReserve], \"ALREADY REGISTERED\");\n\n        isPairReserve[_pairReserve] = true;\n        pairReserves.push(_pairReserve);\n\n        address wklay = IPairReserve(_pairReserve).WKLAY();\n        if (!isWklay[wklay]) {\n            isWklay[wklay] = true;\n            wklays.push(wklay);\n        }\n    }\n\n    function replaceReserve(address _pangeaReserve) external {\n        address prev = wklays[2];\n        isWklay[prev] = false;\n        address curr = IPairReserve(_pangeaReserve).WKLAY();\n        isWklay[curr] = true;\n        wklays[2] = curr;\n\n        isPairReserve[pairReserves[2]] = false;\n        isPairReserve[_pangeaReserve] = true;\n        pairReserves[2] = _pangeaReserve;\n    }\n\n    function registerStableCoin(address _stableCoin) external onlyOwner {\n        require(!isStableCoin[_stableCoin], \"ALREADY REGISTERED\");\n\n        isStableCoin[_stableCoin] = true;\n        stableCoins.push(_stableCoin);\n    }\n\n    function registerKlayOracle(address _klayOracle) external onlyOwner {\n        klayOracle = _klayOracle;\n    }\n\n    // ============= ON CHAIN ORACLE LOGIC ===============\n    function consultKlayPrice() external view returns (uint256 price) {\n        return _klayPriceFromOracle();\n    }\n\n    function consultPrice(address token) external view returns (uint256 price) {\n        for (uint256 i = 0; i < stableCoins.length; i++) {\n            if (stableCoins[i] == token) return 10 ** DECIMAL;\n        }\n\n        for (uint256 i = 0; i < wklays.length; i++) {\n            if (token == wklays[i]) return _klayPriceFromOracle();\n        }\n\n        return _consultPriceFrom(token, address(0));\n    }\n\n    function consultPriceFrom(address token, address referenceToken) external view returns (uint256 price) {\n        return _consultPriceFrom(token, referenceToken);\n    }\n\n    function _consultPriceFrom(address token, address referenceToken) internal view returns (uint256 price) {\n        (uint256 stableReserve, uint256 tokenReserve) = aggregateStablePairReserve(token);\n\n        if (referenceToken == address(0)) {\n            (uint256 klayReserve, uint256 tokenReserveOnKlayPool) = aggregateKlayPairReserve(token);\n            stableReserve += FullMath.mulDiv(klayReserve, _klayPriceFromOracle(), 10 ** DECIMAL);\n            tokenReserve += tokenReserveOnKlayPool;\n        } else {\n            (uint256 referenceReserve, uint256 tokenReserveOnReferencePool) = aggregatePairReserve(referenceToken, token);\n            stableReserve += FullMath.mulDiv(referenceReserve, _consultPriceFrom(referenceToken, address(0)), 10 ** DECIMAL);\n            tokenReserve += tokenReserveOnReferencePool;\n        }\n\n        if (stableReserve == 0 || tokenReserve == 0) {\n            return 0;\n        }\n\n        uint256 tokenDecimal = IERC20Metadata(token).decimals();\n        if (tokenDecimal < 18) {\n            return FullMath.mulDiv(stableReserve, 10 ** DECIMAL, tokenReserve * 10 ** (18 - tokenDecimal));\n        } else {\n            return FullMath.mulDiv(stableReserve, 10 ** (DECIMAL + tokenDecimal - 18), tokenReserve);\n        }\n    }\n\n    function _klayPriceFromOracle() internal view returns (uint256 price) {\n        return IExternalOracle(klayOracle).consultKlayPrice();\n    }\n\n    function aggregateStablePairReserve(address token) private view returns (uint256 stableReserve, uint256 tokenReserve) {\n        for (uint256 i = 0; i < stableCoins.length; i++) {\n            address stableCoin = stableCoins[i];\n            (uint256 _stableReserve, uint256 _tokenReserve) = aggregatePairReserve(stableCoin, token);\n            stableReserve += adjustDecimal(stableCoin, _stableReserve);\n            tokenReserve += _tokenReserve;\n        }\n    }\n\n    function aggregatePairReserve(address token0, address token1) private view returns (uint256 reserve0, uint256 reserve1) {\n        for (uint256 i = 0; i < pairReserves.length; i++) {\n            address pairReserve = pairReserves[i];\n            (uint256 _pairReserve0, uint256 _pairReserve1) = IPairReserve(pairReserve).getReserve(token0, token1);\n            reserve0 += _pairReserve0;\n            reserve1 += _pairReserve1;\n        }\n    }\n\n    function aggregateKlayPairReserve(address token) private view returns (uint256 klayReserve, uint256 tokenReserve) {\n        for (uint256 i = 0; i < pairReserves.length; i++) {\n            address pairReserve = pairReserves[i];\n            (uint256 _klayReserve, uint256 _tokenReserve) = IPairReserve(pairReserve).getKlayReserve(token);\n            klayReserve += _klayReserve;\n            tokenReserve += _tokenReserve;\n        }\n    }\n\n    function adjustDecimal(address token, uint256 amount) internal view returns (uint256) {\n        return amount * 10 ** (18 - IERC20Metadata(token).decimals());\n    }\n}\n"
    },
    "contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\n/// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol.\n/// @dev Handles \"phantom overflow\", i.e., allows multiplication and division where an intermediate value overflows 256 bits.\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\n    /// @param a The multiplicand.\n    /// @param b The multiplier.\n    /// @param denominator The divisor.\n    /// @return result The 256-bit result.\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = a * b.\n        // Compute the product mod 2**256 and mod 2**256 - 1,\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0.\n        uint256 prod0;\n        // Least significant 256 bits of the product.\n        uint256 prod1;\n        // Most significant 256 bits of the product.\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n        // Make sure the result is less than 2**256 -\n        // also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0] -\n        // compute remainder using mulmod.\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number.\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator -\n        // compute largest power of two divisor of denominator\n        // (always >= 1).\n        uint256 twos = uint256(- int256(denominator)) & denominator;\n        // Divide denominator by power of two.\n        assembly {\n            denominator := div(denominator, twos)\n        }\n        // Divide [prod1 prod0] by the factors of two.\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos -\n        // if twos is zero, then it becomes one.\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2**256 -\n        // now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // for four bits. That is, denominator * inv = 1 mod 2**4.\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv;\n        // Inverse mod 2**8.\n        inv *= 2 - denominator * inv;\n        // Inverse mod 2**16.\n        inv *= 2 - denominator * inv;\n        // Inverse mod 2**32.\n        inv *= 2 - denominator * inv;\n        // Inverse mod 2**64.\n        inv *= 2 - denominator * inv;\n        // Inverse mod 2**128.\n        inv *= 2 - denominator * inv;\n        // Inverse mod 2**256.\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\n    /// @param a The multiplicand.\n    /// @param b The multiplier.\n    /// @param denominator The divisor.\n    /// @return result The 256-bit result.\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n    unchecked {\n        if (mulmod(a, b, denominator) != 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n    }\n}\n"
    },
    "contracts/interfaces/IExternalOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\ninterface IExternalOracle {\n\n    function consultKlayPrice() external view returns (uint256);\n\n}\n"
    },
    "contracts/interfaces/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\ninterface IPriceOracle {\n    /// @notice dollar 환산 시 unit, (units = 6)\n    /// @dev 예시로 price = 700574인 경우, 0.700574$ 을 의미\n    function DECIMAL() external view returns (uint256 decimal);\n\n    /// @notice 클레이의 가격 가져오기 (units : 10 ^ -6 $)\n    function consultKlayPrice() external view returns (uint256 price);\n\n    /// @notice 토큰의 price 가져오기 (units : 10 ^ -6 $)\n    /// @param token 조회할 토큰의 주소\n    /// @dev (클레이 / DAI / USDC / USDT)와의 페어 풀이 하나도 없는 경우, 가격은 0으로 나옵니다\n    function consultPrice(address token) external view returns (uint256 price);\n\n    /// @notice referenceToken 가격을 바탕으로 토큰의 price 가져오기 (units : 10 ^ -6 $)\n    /// @param token 조회할 토큰의 주소\n    /// @dev (클레이 / DAI / USDC / USDT)와의 페어 풀이 하나도 없는 경우, referenceToken과의 페어풀을 바탕으로 가격을 추론합니다\n    function consultPriceFrom(address token, address referenceToken) external view returns (uint256 price);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/external/WitnetOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\nimport \"../interfaces/IExternalOracle.sol\";\nimport \"witnet-solidity-bridge/contracts/interfaces/IWitnetPriceRouter.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract WitnetOracle is IExternalOracle, Initializable {\n\n    IWitnetPriceRouter public witnetPriceRouter;\n\n    function initialize(address _witnetOracle) external initializer {\n        witnetPriceRouter = IWitnetPriceRouter(_witnetOracle);\n    }\n\n    function consultKlayPrice() external view returns (uint256 price) {\n        (int256 iPrice,,) = witnetPriceRouter.valueFor(0x5d9add33a579dcae4103453b8445b350aa99013a7863d73770cd7c135b2c47a0);\n        price = uint256(iPrice);\n    }\n}\n"
    },
    "witnet-solidity-bridge/contracts/interfaces/IWitnetPriceRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\npragma experimental ABIEncoderV2;\n\nimport \"ado-contracts/contracts/interfaces/IERC2362.sol\";\nimport \"./IERC165.sol\";\n\n/// @title The Witnet Price Router basic interface.\n/// @dev Guides implementation of price feeds aggregation contracts.\n/// @author The Witnet Foundation.\nabstract contract IWitnetPriceRouter\n    is\n        IERC2362 \n{\n    /// Emitted everytime a currency pair is attached to a new price feed contract\n    /// @dev See https://github.com/adoracles/ADOIPs/blob/main/adoip-0010.md \n    /// @dev to learn how these ids are created.\n    event CurrencyPairSet(bytes32 indexed erc2362ID, IERC165 pricefeed);\n\n    /// Helper pure function: returns hash of the provided ERC2362-compliant currency pair caption (aka ID).\n    function currencyPairId(string memory) external pure virtual returns (bytes32);\n\n    /// Returns the ERC-165-compliant price feed contract currently serving \n    /// updates on the given currency pair.\n    function getPriceFeed(bytes32 _erc2362id) external view virtual returns (IERC165);\n\n    /// Returns human-readable ERC2362-based caption of the currency pair being\n    /// served by the given price feed contract address. \n    /// @dev Should fail if the given price feed contract address is not currently\n    /// @dev registered in the router.\n    function getPriceFeedCaption(IERC165) external view virtual returns (string memory);\n\n    /// Returns human-readable caption of the ERC2362-based currency pair identifier, if known.\n    function lookupERC2362ID(bytes32 _erc2362id) external view virtual returns (string memory);\n\n    /// Register a price feed contract that will serve updates for the given currency pair.\n    /// @dev Setting zero address to a currency pair implies that it will not be served any longer.\n    /// @dev Otherwise, should fail if the price feed contract does not support the `IWitnetPriceFeed` interface,\n    /// @dev or if given price feed is already serving another currency pair (within this WitnetPriceRouter instance).\n    function setPriceFeed(\n            IERC165 _pricefeed,\n            uint256 _decimals,\n            string calldata _base,\n            string calldata _quote\n        )\n        external virtual;\n\n    /// Returns list of known currency pairs IDs.\n    function supportedCurrencyPairs() external view virtual returns (bytes32[] memory);\n\n    /// Returns `true` if given pair is currently being served by a compliant price feed contract.\n    function supportsCurrencyPair(bytes32 _erc2362id) external view virtual returns (bool);\n\n    /// Returns `true` if given price feed contract is currently serving updates to any known currency pair. \n    function supportsPriceFeed(IERC165 _priceFeed) external view virtual returns (bool);\n}\n"
    },
    "ado-contracts/contracts/interfaces/IERC2362.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0 <0.9.0;\n\n/**\n* @dev EIP2362 Interface for pull oracles\n* https://github.com/adoracles/EIPs/blob/erc-2362/EIPS/eip-2362.md\n*/\ninterface IERC2362\n{\n\t/**\n\t * @dev Exposed function pertaining to EIP standards\n\t * @param _id bytes32 ID of the query\n\t * @return int,uint,uint returns the value, timestamp, and status code of query\n\t */\n\tfunction valueFor(bytes32 _id) external view returns(int256,uint256,uint256);\n}"
    },
    "witnet-solidity-bridge/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/dex/UniswapReserve.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"../interfaces/IPairReserve.sol\";\nimport \"../interfaces/uniswap/IUniswapV2Pair.sol\";\nimport \"../interfaces/uniswap/IUniswapV2Factory.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract UniswapReserve is IPairReserve, Initializable {\n\n    IUniswapV2Factory public factory;\n    address private wklay;\n\n    function initialize(address _factory, address _wklay) external initializer {\n        factory = IUniswapV2Factory(_factory);\n        wklay = _wklay;\n    }\n\n    function WKLAY() external view returns (address) {\n        return wklay;\n    }\n\n    function getReserve(address token0, address token1) external view returns (uint256 reserve0, uint256 reserve1) {\n        return _getReserve(token0, token1);\n    }\n\n    function getKlayReserve(address token) external view returns (uint256 klayReserve, uint256 tokenReserve) {\n        return _getReserve(wklay, token);\n    }\n\n    function _getReserve(address token0, address token1) internal view returns (uint256 reserve0, uint256 reserve1) {\n        address pool = factory.getPair(token0, token1);\n        if (pool == address(0)) return (0, 0);\n        (uint112 _reserve0, uint112 _reserve1,) = IUniswapV2Pair(pool).getReserves();\n\n        if (IUniswapV2Pair(pool).token0() == token0) {\n            return (_reserve0, _reserve1);\n        } else {\n            return (_reserve1, _reserve0);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/uniswap/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n    external\n    view\n    returns (\n        uint112 reserve0,\n        uint112 reserve1,\n        uint32 blockTimestampLast\n    );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/interfaces/uniswap/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function migrator() external view returns (address);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function feeDistributor() external view returns (address);\n\n    function klayBuybackFund() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function createPair(\n        address tokenA,\n        address tokenB,\n        uint8 decimals\n    ) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n\n    function setFeeDistributor(address) external;\n\n    function setKlayBuybackFund(address) external;\n\n    function setMigrator(address) external;\n}\n"
    },
    "contracts/dex/PangeaReserve.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport \"../libraries/FullMath.sol\";\nimport \"../interfaces/IPairReserve.sol\";\nimport \"../interfaces/pangea/IConcentratedLiquidityPool.sol\";\nimport \"../interfaces/pangea/IConcentratedLiquidityPoolFactory.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n\ncontract PangeaReserve is IPairReserve, Initializable {\n\n    IConcentratedLiquidityPoolFactory public factory;\n    address private wklay;\n\n    function initialize(address _factory, address _wklay) external initializer {\n        factory = IConcentratedLiquidityPoolFactory(_factory);\n        wklay = _wklay;\n    }\n\n    function WKLAY() external view returns (address) {\n        return wklay;\n    }\n\n    function getReserve(address token0, address token1) external view returns (uint256 reserve0, uint256 reserve1) {\n        return _getReserve(token0, token1);\n    }\n\n    function getKlayReserve(address token) external view returns (uint256 klayReserve, uint256 tokenReserve) {\n        return _getReserve(wklay, token);\n    }\n\n    function _getReserve(address token0, address token1) internal view returns (uint256 reserve0, uint256 reserve1) {\n        address[] memory pools = factory.getPools(token0, token1, 0, factory.poolsCount(token0, token1));\n\n        for (uint256 i = 0; i < pools.length; i++) {\n            IConcentratedLiquidityPool pool = IConcentratedLiquidityPool(pools[i]);\n            uint256 price = pool.price();\n            uint256 liquidity = pool.liquidity();\n            if (pool.token0() == token0) {\n                reserve0 += FullMath.mulDiv(liquidity, 0x1000000000000000000000000, price);\n                reserve1 += FullMath.mulDiv(liquidity, price, 0x1000000000000000000000000);\n            } else {\n                reserve0 += FullMath.mulDiv(liquidity, price, 0x1000000000000000000000000);\n                reserve1 += FullMath.mulDiv(liquidity, 0x1000000000000000000000000, price);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/pangea/IConcentratedLiquidityPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\n/// @notice concentrated liquidity pool contract Structs.\ninterface IConcentratedLiquidityPoolStruct {\n    struct Tick {\n        /// @dev The highest tick below the current tick, pointer to the previous node in the linked list.\n        int24 previousTick;\n        /// @dev the lowest tick above the current tick, pointer to the next node in the linked list.\n        int24 nextTick;\n        /// @dev how much liquidity changes when the pool price crosses the tick\n        uint128 liquidity;\n        /// @dev the fee growth on the other side of the tick from the current tick in token0\n        uint256 feeGrowthOutside0;\n        /// @dev the fee growth on the other side of the tick from the current tick in token1\n        uint256 feeGrowthOutside1;\n        /// @dev the seconds spent per liquidity on the other side of the tick from the current tick\n        uint160 secondsGrowthOutside;\n    }\n\n    struct Position {\n        /// @dev the amount of liquidity in the position\n        uint128 liquidity;\n        /// @dev fee growth of token0 inside the tick range as of the last mint/burn/collect\n        uint256 feeGrowthInside0Last;\n        /// @dev fee growth of token1 inside the tick range as of the last mint/burn/collect\n        uint256 feeGrowthInside1Last;\n        /// @dev computed amount of token0 owed to the position as of the last mint/burn/collect\n        uint128 feeOwed0;\n        /// @dev computed amount of token1 owed to the position as of the last mint/burn/collect\n        uint128 feeOwed1;\n    }\n\n    struct MintParams {\n        /// @dev lowerOld previous lower tick\n        int24 lowerOld;\n        /// @dev lower The lower end of the tick range for the position\n        int24 lower;\n        /// @dev upperOld previous upper tick\n        int24 upperOld;\n        /// @dev upper The upper end of the tick range for the position\n        int24 upper;\n        /// @dev amount0Desired The amount of token0 to mint the given amount of liquidity\n        uint128 amount0Desired;\n        /// @dev amount1Desired The amount of token1 to mint the given amount of liquidity\n        uint128 amount1Desired;\n    }\n\n    struct SwapCache {\n        uint256 feeAmount;\n        uint256 totalFeeAmount;\n        uint256 protocolFee;\n        uint256 feeGrowthGlobalA;\n        uint256 feeGrowthGlobalB;\n        uint256 currentPrice;\n        uint256 currentLiquidity;\n        uint256 input;\n        int24 nextTickToCross;\n    }\n}\n\n/// @notice Concentrated Liquidity Pool interface.\ninterface IConcentratedLiquidityPool is IConcentratedLiquidityPoolStruct {\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be created every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// @dev Reference: tickSpacing of 100 -> 1% between ticks.\n    function tickSpacing() external view returns (uint24);\n\n    /// @dev 1000 corresponds to 0.1% fee. Fee is measured in pips.\n    function swapFee() external view returns (uint24);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    function token1() external view returns (address);\n\n    /// @notice list of the two tokens of the pool, sorted by address\n    function getAssets() external view returns (address[] memory tokens);\n\n    /// @notice Number of ticks on Pool, starts with two ticks (MIN_TICK & MAX_TICK)\n    function totalTicks() external view returns (uint256);\n\n    /// @notice The currently in range liquidity available to the poo\n    // @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Sqrt of price aka. √(token1/token0), multiplied by 2^96.\n    function price() external view returns (uint160);\n\n    /// @notice Tick that is just below the current price.\n    function nearestTick() external view returns (int24);\n\n    /// @notice price and nearestTick\n    function getPriceAndNearestTicks() external view returns (uint160 price, int24 nearestTick);\n\n    /// @notice reserve of token0 and token1\n    function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up, the log base 1.0001 of price of the pool\n    function ticks(int24 tick) external view returns (Tick memory);\n\n    /// @notice Returns the information about a position\n    /// @param owner owner of position, position is consisted of 3 elements, (owner / lower / upper)\n    /// @param lower The lower tick of the position\n    /// @param upper The upper tick of the position\n    function positions(\n        address owner,\n        int24 lower,\n        int24 upper\n    ) external view returns (Position memory);\n\n    /// @notice The fee growth of token0 collected per unit of liquidity for the entire life of the pool\n    function feeGrowthGlobal0() external view returns (uint256);\n\n    /// @notice The fee growth of token1 collected per unit of liquidity for the entire life of the pool\n    function feeGrowthGlobal1() external view returns (uint256);\n\n    /// @notice fee growth of token0 & token1 inside the given price range\n    /// @param lower The lower tick of the position\n    /// @param upper The upper tick of the position\n    function rangeFeeGrowth(int24 lower, int24 upper) external view returns (uint256 feeGrowthInside0, uint256 feeGrowthInside1);\n\n    /// @notice the address of callback contract to call after mint/burn/collect\n    function callback() external view returns (address);\n\n    /// @notice the address of factory contract\n    function factory() external view returns (address);\n\n    /// @notice Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\n    /// @param data abi.encode(bool zeroForOne, address recipient)\n    function swap(bytes memory data) external returns (uint256 amountOut);\n\n    /// @notice Mints LP tokens - should be called via the Concentrated Liquidity pool manager contract.\n    /// @param data MintParams(int24 lowerOld, int24 lower, int24 upperOld, int24 upper, uint128 amount0Desired, uint128 amount1Desired)\n    function mint(MintParams memory data) external returns (uint256 liquidityMinted);\n\n    /// @notice Burns LP tokens - should be called via the Concentrated Liquidity pool manager contract.\n    /// @param lower The lower tick of the position\n    /// @param upper The upper tick of the position\n    /// @param amount The amount of liquidity to burn\n    function burn(\n        int24 lower,\n        int24 upper,\n        uint128 amount\n    ) external returns (uint256 token0Amount, uint256 token1Amount);\n\n    /// @notice Collects tokens owed to a position\n    /// @param lower The lower tick of the position\n    /// @param upper The upper tick of the position\n    /// @param desiredToken0Fees How much token0 want be withdrawn from the fees owed\n    /// @param desiredToken1Fees How much token1 want be withdrawn from the fees owed\n    // @dev If desired fees exceeds the possible amount, only the possible amount will be returned.\n    function collect(\n        int24 lower,\n        int24 upper,\n        uint256 desiredToken0Fees,\n        uint256 desiredToken1Fees\n    ) external returns (uint256 token0Fees, uint256 token1Fees);\n\n    /// @notice Returns the information about a seconds global growth and the timestamp of the observation\n    /// @return secondGrowthGlobal the seconds per in range liquidity for the life of the pool as of the observation timestamp\n    /// @return lastObservation The timestamp of the observation\n    function getSecondsGrowthAndLastObservation() external view returns (uint160 secondGrowthGlobal, uint32 lastObservation);\n\n    function collectProtocolFee() external returns (uint128, uint128);\n\n    function setPrice(uint160 price) external;\n\n    function setGauge(address gauge) external;\n\n    function registerLogger(address logger) external;\n\n    function setDistributor(address distributor) external;\n\n    function getImmutables()\n    external\n    view\n    returns (\n        uint128 MAX_TICK_LIQUIDITY,\n        uint24 tickSpacing,\n        uint24 swapFee,\n        address protocolFeeTo,\n        address masterDeployer,\n        address token0,\n        address token1\n    );\n}\n"
    },
    "contracts/interfaces/pangea/IConcentratedLiquidityPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\n/// @notice Pool Factory interface.\ninterface IConcentratedLiquidityPoolFactory {\n    /// @notice Return whether the pool is created by the factory\n    function isPool(address pool) external returns (bool ok);\n\n    /// @notice Return the number of pools composed of two tokens\n    function poolsCount(address token0, address token1) external view returns (uint256 count);\n\n    /// @notice Return the list of pools composed of two tokens\n    function getPools(\n        address token0,\n        address token1,\n        uint256 startIndex,\n        uint256 count\n    ) external view returns (address[] memory pairPools);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 9999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}