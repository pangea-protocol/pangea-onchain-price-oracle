{
  "address": "0xcaEfAEE0Acb65A9Ca99a7bD97EBF92888f4035D8",
  "abi": [
    {
      "inputs": [],
      "name": "ALREADY_REGISTERED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_REGISTERED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_REGISTERED_ORACLE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZERO_ADDRESS",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "baseTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "consultKlayPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "consultPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "referenceTokens",
          "type": "address[]"
        }
      ],
      "name": "consultPriceFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isBaseToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPairReserve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairReserves",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "registerBaseToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pairReserve",
          "type": "address"
        }
      ],
      "name": "registerPairReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "registerTokenOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenPriceOracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unRegisterBaseToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "unRegisterTokenOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x89763af067a7003ad760e08e75c2d9e2979905d1a182f92df71c01e451542afb",
  "receipt": {
    "to": null,
    "from": "0x2A2F23ff33671361010D357529BDF0adca9416Fc",
    "contractAddress": "0xcaEfAEE0Acb65A9Ca99a7bD97EBF92888f4035D8",
    "transactionIndex": 0,
    "gasUsed": "2066697",
    "logsBloom": "0x
    "blockHash": "0xeba889d56c9affe74446d12e65e0defaf841309525b3ed856ebdd17fd066f303",
    "transactionHash": "0x89763af067a7003ad760e08e75c2d9e2979905d1a182f92df71c01e451542afb",
    "logs": [],
    "blockNumber": 98750048,
    "cumulativeGasUsed": "2066697",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "42f6250ef7f91c4bbdbba6bdf3ac95e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ALREADY_REGISTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_REGISTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_REGISTERED_ORACLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consultKlayPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"consultPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"referenceTokens\",\"type\":\"address[]\"}],\"name\":\"consultPriceFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBaseToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPairReserve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairReserves\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"registerBaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairReserve\",\"type\":\"address\"}],\"name\":\"registerPairReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"registerTokenOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPriceOracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unRegisterBaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unRegisterTokenOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"consultPrice(address)\":{\"details\":\"(\\ud074\\ub808\\uc774 / DAI / USDC / USDT)\\uc640\\uc758 \\ud398\\uc5b4 \\ud480\\uc774 \\ud558\\ub098\\ub3c4 \\uc5c6\\ub294 \\uacbd\\uc6b0, \\uac00\\uaca9\\uc740 0\\uc73c\\ub85c \\ub098\\uc635\\ub2c8\\ub2e4\",\"params\":{\"token\":\"\\uc870\\ud68c\\ud560 \\ud1a0\\ud070\\uc758 \\uc8fc\\uc18c\"}},\"consultPriceFrom(address,address[])\":{\"details\":\"(\\ud074\\ub808\\uc774 / DAI / USDC / USDT)\\uc640\\uc758 \\ud398\\uc5b4 \\ud480\\uc774 \\ud558\\ub098\\ub3c4 \\uc5c6\\ub294 \\uacbd\\uc6b0, referenceToken\\uacfc\\uc758 \\ud398\\uc5b4\\ud480\\uc744 \\ubc14\\ud0d5\\uc73c\\ub85c \\uac00\\uaca9\\uc744 \\ucd94\\ub860\\ud569\\ub2c8\\ub2e4\",\"params\":{\"token\":\"\\uc870\\ud68c\\ud560 \\ud1a0\\ud070\\uc758 \\uc8fc\\uc18c\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"DECIMAL\":{\"details\":\"\\uc608\\uc2dc\\ub85c price = 700574\\uc778 \\uacbd\\uc6b0, 0.700574$ \\uc744 \\uc758\\ubbf8\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DECIMAL()\":{\"notice\":\"dollar \\ud658\\uc0b0 \\uc2dc unit, (units = 6)\"},\"consultKlayPrice()\":{\"notice\":\"\\ud074\\ub808\\uc774\\uc758 \\uac00\\uaca9 \\uac00\\uc838\\uc624\\uae30 (units : 10 ^ -6 $)\"},\"consultPrice(address)\":{\"notice\":\"\\ud1a0\\ud070\\uc758 price \\uac00\\uc838\\uc624\\uae30 (units : 10 ^ -6 $)\"},\"consultPriceFrom(address,address[])\":{\"notice\":\"referenceToken \\uac00\\uaca9\\uc744 \\ubc14\\ud0d5\\uc73c\\ub85c \\ud1a0\\ud070\\uc758 price \\uac00\\uc838\\uc624\\uae30 (units : 10 ^ -6 $)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./libraries/FullMath.sol\\\";\\nimport \\\"./interfaces/IPairReserve.sol\\\";\\nimport \\\"./interfaces/IExternalOracle.sol\\\";\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IPriceOracleError.sol\\\";\\n\\ncontract PriceOracle is IPriceOracle, IPriceOracleError, OwnableUpgradeable {\\n\\n    uint256 public constant DECIMAL = 6;\\n\\n    mapping(address => bool) public isPairReserve;\\n    address[] public pairReserves;\\n\\n    mapping(address => bool) public isBaseToken;\\n    address[] public baseTokens;\\n\\n    mapping(address => address) public tokenPriceOracles;\\n\\n    function initialize() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    // ============ ONLY ADMIN ==================\\n    function registerPairReserve(address _pairReserve) external onlyOwner {\\n        if (_pairReserve == address(0)) revert ZERO_ADDRESS();\\n        if (isPairReserve[_pairReserve]) revert ALREADY_REGISTERED();\\n\\n        isPairReserve[_pairReserve] = true;\\n        pairReserves.push(_pairReserve);\\n    }\\n\\n    function registerTokenOracle(address _token, address _priceOracle) external onlyOwner {\\n        if (_priceOracle == address(0)) revert ZERO_ADDRESS();\\n\\n        tokenPriceOracles[_token] = _priceOracle;\\n    }\\n\\n    function unRegisterTokenOracle(address _token) external onlyOwner {\\n        tokenPriceOracles[_token] = address(0);\\n    }\\n\\n    function registerBaseToken(address token) external onlyOwner {\\n        if (tokenPriceOracles[token] == address(0)) revert NOT_REGISTERED_ORACLE();\\n        if (isBaseToken[token]) revert ALREADY_REGISTERED();\\n        isBaseToken[token] = true;\\n        baseTokens.push(token);\\n    }\\n\\n    function unRegisterBaseToken(address token) external onlyOwner {\\n        if (!isBaseToken[token]) revert NOT_REGISTERED();\\n        isBaseToken[token] = false;\\n\\n        for (uint256 i = 0; i < baseTokens.length - 1; i++) {\\n            address baseToken = baseTokens[i];\\n            if (baseToken == token) {\\n                baseTokens[i] = baseTokens[baseTokens.length - 1];\\n                break;\\n            }\\n        }\\n\\n        baseTokens.pop();\\n    }\\n\\n    // ============= ON CHAIN ORACLE LOGIC ===============\\n    function consultKlayPrice() external view returns (uint256 price) {\\n        return IExternalOracle(tokenPriceOracles[address(0)]).consultPrice(address(0));\\n    }\\n\\n    function consultPrice(address token) external view returns (uint256 price) {\\n        address _priceOracle = tokenPriceOracles[token];\\n\\n        if (_priceOracle != address(0)) {\\n            return IExternalOracle(_priceOracle).consultPrice(token);\\n        } else {\\n            return evaluateDerivedTokenPrice(token, baseTokens);\\n        }\\n    }\\n\\n    function consultPriceFrom(address token, address[] memory referenceTokens) external view returns (uint256 price) {\\n        return evaluateDerivedTokenPrice(token, referenceTokens);\\n    }\\n\\n    function evaluateDerivedTokenPrice(address derivedToken, address[] memory _baseTokens) internal view returns (uint256 price) {\\n        (uint256 dollarReserve, uint256 tokenReserve) = dollarPairReserve(derivedToken, _baseTokens);\\n        if (dollarReserve == 0 || tokenReserve == 0) return 0;\\n\\n        uint256 tokenDecimal = IERC20Metadata(derivedToken).decimals();\\n        if (tokenDecimal < 18) {\\n            return FullMath.mulDiv(dollarReserve, 10 ** DECIMAL, tokenReserve * 10 ** (18 - tokenDecimal));\\n        } else {\\n            return FullMath.mulDiv(dollarReserve, 10 ** (DECIMAL + tokenDecimal - 18), tokenReserve);\\n        }\\n    }\\n\\n    function dollarPairReserve(\\n        address token,\\n        address[] memory _baseTokens\\n    ) private view returns (uint256 dollarReserve, uint256 tokenReserve) {\\n        for (uint256 i = 0; i < _baseTokens.length; i++) {\\n            address _baseToken = _baseTokens[i];\\n            (uint256 _baseReserve, uint256 _tokenReserve) = aggregateReserves(_baseToken, token);\\n\\n            // Convert the total reserves of baseToken in dollars\\n            dollarReserve += adjustBaseReserveToDollarReserve(_baseToken, _baseReserve);\\n            tokenReserve += _tokenReserve;\\n        }\\n    }\\n\\n    function aggregateReserves(\\n        address token0,\\n        address token1\\n    ) private view returns (uint256 reserve0, uint256 reserve1) {\\n        for (uint256 i = 0; i < pairReserves.length; i++) {\\n            address pairReserve = pairReserves[i];\\n            (uint256 _pairReserve0, uint256 _pairReserve1) = IPairReserve(pairReserve).getReserve(token0, token1);\\n            reserve0 += _pairReserve0;\\n            reserve1 += _pairReserve1;\\n        }\\n    }\\n\\n    function adjustBaseReserveToDollarReserve(\\n        address baseToken,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        uint8 decimals = baseToken == address(0) ? 18 : IERC20Metadata(baseToken).decimals();\\n        uint256 price = IExternalOracle(tokenPriceOracles[baseToken]).consultPrice(baseToken);\\n        if (decimals > 18) {\\n            return FullMath.mulDiv(amount, price, 10 ** (decimals - 18 + DECIMAL));\\n        } else {\\n            return FullMath.mulDiv(amount, price * 10 ** (18 - decimals), 10 ** DECIMAL);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d15435b2baf1103b9af671568eba52774949bf734c7a49fb6cfbfbffa8365bc\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IExternalOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IExternalOracle {\\n\\n    function consultPrice(address token) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x0e40215d53242bea7d7038c44bab70d9a0a2c2a95ced67cd2711b082a33b7f3c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPairReserve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n\\ninterface IPairReserve {\\n\\n    function WKLAY() external view returns (address);\\n\\n    function getReserve(address token0, address token1) external view returns (uint256 reserve0, uint256 reserve1);\\n\\n}\\n\",\"keccak256\":\"0xde61144ddd9cc3bf86784bf052f0e53b6ab9fccd8e80927d2510700a6fa13d7f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPriceOracle {\\n    /// @notice dollar \\ud658\\uc0b0 \\uc2dc unit, (units = 6)\\n    /// @dev \\uc608\\uc2dc\\ub85c price = 700574\\uc778 \\uacbd\\uc6b0, 0.700574$ \\uc744 \\uc758\\ubbf8\\n    function DECIMAL() external view returns (uint256 decimal);\\n\\n    /// @notice \\ud074\\ub808\\uc774\\uc758 \\uac00\\uaca9 \\uac00\\uc838\\uc624\\uae30 (units : 10 ^ -6 $)\\n    function consultKlayPrice() external view returns (uint256 price);\\n\\n    /// @notice \\ud1a0\\ud070\\uc758 price \\uac00\\uc838\\uc624\\uae30 (units : 10 ^ -6 $)\\n    /// @param token \\uc870\\ud68c\\ud560 \\ud1a0\\ud070\\uc758 \\uc8fc\\uc18c\\n    /// @dev (\\ud074\\ub808\\uc774 / DAI / USDC / USDT)\\uc640\\uc758 \\ud398\\uc5b4 \\ud480\\uc774 \\ud558\\ub098\\ub3c4 \\uc5c6\\ub294 \\uacbd\\uc6b0, \\uac00\\uaca9\\uc740 0\\uc73c\\ub85c \\ub098\\uc635\\ub2c8\\ub2e4\\n    function consultPrice(address token) external view returns (uint256 price);\\n\\n    /// @notice referenceToken \\uac00\\uaca9\\uc744 \\ubc14\\ud0d5\\uc73c\\ub85c \\ud1a0\\ud070\\uc758 price \\uac00\\uc838\\uc624\\uae30 (units : 10 ^ -6 $)\\n    /// @param token \\uc870\\ud68c\\ud560 \\ud1a0\\ud070\\uc758 \\uc8fc\\uc18c\\n    /// @dev (\\ud074\\ub808\\uc774 / DAI / USDC / USDT)\\uc640\\uc758 \\ud398\\uc5b4 \\ud480\\uc774 \\ud558\\ub098\\ub3c4 \\uc5c6\\ub294 \\uacbd\\uc6b0, referenceToken\\uacfc\\uc758 \\ud398\\uc5b4\\ud480\\uc744 \\ubc14\\ud0d5\\uc73c\\ub85c \\uac00\\uaca9\\uc744 \\ucd94\\ub860\\ud569\\ub2c8\\ub2e4\\n    function consultPriceFrom(address token, address[] memory referenceTokens) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x68cb6c60a823e166323d01f0c951ad977e2e40ad5ccb8b6df4909e978e60fd77\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPriceOracleError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPriceOracleError {\\n    error ALREADY_REGISTERED();\\n\\n    error NOT_REGISTERED();\\n\\n    error NOT_REGISTERED_ORACLE();\\n\\n    error ZERO_ADDRESS();\\n}\\n\",\"keccak256\":\"0x8b80bb3d893de9891a91863b881e370c1d3795e378d93620f9489cfc2e0df980\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol.\\n/// @dev Handles \\\"phantom overflow\\\", i.e., allows multiplication and division where an intermediate value overflows 256 bits.\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n    unchecked {\\n        // 512-bit multiply [prod1 prod0] = a * b.\\n        // Compute the product mod 2**256 and mod 2**256 - 1,\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0.\\n        uint256 prod0;\\n        // Least significant 256 bits of the product.\\n        uint256 prod1;\\n        // Most significant 256 bits of the product.\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n        // Make sure the result is less than 2**256 -\\n        // also prevents denominator == 0.\\n        require(denominator > prod1);\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n        // Make division exact by subtracting the remainder from [prod1 prod0] -\\n        // compute remainder using mulmod.\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number.\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n        // Factor powers of two out of denominator -\\n        // compute largest power of two divisor of denominator\\n        // (always >= 1).\\n        uint256 twos = uint256(- int256(denominator)) & denominator;\\n        // Divide denominator by power of two.\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n        // Divide [prod1 prod0] by the factors of two.\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos -\\n        // if twos is zero, then it becomes one.\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n        // Invert denominator mod 2**256 -\\n        // now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // for four bits. That is, denominator * inv = 1 mod 2**4.\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv;\\n        // Inverse mod 2**8.\\n        inv *= 2 - denominator * inv;\\n        // Inverse mod 2**16.\\n        inv *= 2 - denominator * inv;\\n        // Inverse mod 2**32.\\n        inv *= 2 - denominator * inv;\\n        // Inverse mod 2**64.\\n        inv *= 2 - denominator * inv;\\n        // Inverse mod 2**128.\\n        inv *= 2 - denominator * inv;\\n        // Inverse mod 2**256.\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n    unchecked {\\n        if (mulmod(a, b, denominator) != 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n    }\\n}\\n\",\"keccak256\":\"0x2687091dec44b2c8e28c9a1536c3802b9f0c644ae0762626398096b6184ae9a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611a29806100206000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c806385bb6a3c116100b2578063cd8e19c511610081578063e46a316d11610066578063e46a316d146102a1578063f2fde38b146102d7578063fe2ab286146102ea57600080fd5b8063cd8e19c51461027b578063db248cb91461028e57600080fd5b806385bb6a3c1461021f5780638da5cb5b14610242578063b74c9c8d14610260578063cc9ff6e11461026857600080fd5b80636ba01df81161010957806377a98d18116100ee57806377a98d18146101d15780638129fc1c146102045780638194fe9e1461020c57600080fd5b80636ba01df8146101b6578063715018a6146101c957600080fd5b8063032b1e941461013b57806328f25f9e14610150578063328123a2146101765780636ab55fd9146101ae575b600080fd5b61014e61014936600461157f565b6102fd565b005b61016361015e3660046115c9565b61045b565b6040519081526020015b60405180910390f35b6101896101843660046116bf565b610470565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161016d565b610163600681565b61014e6101c436600461157f565b6104a7565b61014e610616565b6101f46101df36600461157f565b60656020526000908152604090205460ff1681565b604051901515815260200161016d565b61014e61062a565b61016361021a36600461157f565b6107c1565b6101f461022d36600461157f565b60676020526000908152604090205460ff1681565b60335473ffffffffffffffffffffffffffffffffffffffff16610189565b610163610908565b61014e61027636600461157f565b6109d8565b61014e6102893660046116d8565b610c0c565b61018961029c3660046116bf565b610cb4565b6101896102af36600461157f565b60696020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61014e6102e536600461157f565b610cc4565b61014e6102f836600461157f565b610d78565b610305610dcc565b73ffffffffffffffffffffffffffffffffffffffff8116610352576040517f538ba4f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526065602052604090205460ff16156103b2576040517ff577854000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600081815260656020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556066805491820181559091527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943540180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b60006104678383610e4d565b90505b92915050565b6068818154811061048057600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6104af610dcc565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152606960205260409020541661050d576040517fae45917c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526067602052604090205460ff161561056d576040517ff577854000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600081815260676020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556068805491820181559091527fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c220977530180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b61061e610dcc565b6106286000610f76565b565b600054610100900460ff161580801561064a5750600054600160ff909116105b806106645750303b158015610664575060005460ff166001145b6106f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561075357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61075b610fed565b80156107be57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152606960205260408120549091168015610897576040517f8194fe9e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152821690638194fe9e9060240160206040518083038186803b15801561085857600080fd5b505afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610890919061170b565b9392505050565b6108908360688054806020026020016040519081016040528092919081815260200182805480156108fe57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116108d3575b5050505050610e4d565b600080805260696020527f5843af22e99e7c98370145a5056245c244ce8ee852f4ef5e6d6a8e410a18cf41546040517f8194fe9e0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff90911690638194fe9e9060240160206040518083038186803b15801561099b57600080fd5b505afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d3919061170b565b905090565b6109e0610dcc565b73ffffffffffffffffffffffffffffffffffffffff811660009081526067602052604090205460ff16610a3f576040517f60f4985300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260676020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b606854610a9a90600190611753565b811015610b9f57600060688281548110610ab657610ab661176a565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff90811691508316811415610b8c5760688054610af590600190611753565b81548110610b0557610b0561176a565b6000918252602090912001546068805473ffffffffffffffffffffffffffffffffffffffff9092169184908110610b3e57610b3e61176a565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610b9f565b5080610b9781611799565b915050610a8b565b506068805480610bb157610bb16117d2565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905550565b610c14610dcc565b73ffffffffffffffffffffffffffffffffffffffff8116610c61576040517f538ba4f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff918216600090815260696020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b6066818154811061048057600080fd5b610ccc610dcc565b73ffffffffffffffffffffffffffffffffffffffff8116610d6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106ec565b6107be81610f76565b610d80610dcc565b73ffffffffffffffffffffffffffffffffffffffff16600090815260696020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60335473ffffffffffffffffffffffffffffffffffffffff163314610628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ec565b6000806000610e5c858561108c565b915091508160001480610e6d575080155b15610e7d5760009250505061046a565b60008573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ec557600080fd5b505afa158015610ed9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efd9190611801565b60ff1690506012811015610f4a57610f4083610f1b6006600a61193c565b610f26846012611753565b610f3190600a61193c565b610f3b9086611948565b61110a565b935050505061046a565b610f40836012610f5b846006611985565b610f659190611753565b610f7090600a61193c565b8461110a565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106ec565b6106286111db565b60008060005b83518110156111025760008482815181106110af576110af61176a565b602002602001015190506000806110c6838961127b565b915091506110d4838361138a565b6110de9087611985565b95506110ea8186611985565b945050505080806110fa90611799565b915050611092565b509250929050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415611162576000841161115757600080fd5b508290049050610890565b80841161116e57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b600054610100900460ff16611272576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106ec565b61062833610f76565b60008060005b606654811015611102576000606682815481106112a0576112a061176a565b60009182526020822001546040517fcbc3ab5300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152888116602483015290911692508190839063cbc3ab5390604401604080518083038186803b15801561131f57600080fd5b505afa158015611333573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611357919061199d565b90925090506113668287611985565b95506113728186611985565b9450505050808061138290611799565b915050611281565b60008073ffffffffffffffffffffffffffffffffffffffff84161561142c578373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ef57600080fd5b505afa158015611403573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114279190611801565b61142f565b60125b73ffffffffffffffffffffffffffffffffffffffff8581166000818152606960205260408082205490517f8194fe9e00000000000000000000000000000000000000000000000000000000815260048101939093529394509290911690638194fe9e9060240160206040518083038186803b1580156114ad57600080fd5b505afa1580156114c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e5919061170b565b905060128260ff1611156115265761151d848260066115056012876119c1565b60ff166115129190611985565b610f3b90600a61193c565b9250505061046a565b61151d846115358460126119c1565b61154090600a6119e4565b61154a9084611948565b610f3b6006600a61193c565b803573ffffffffffffffffffffffffffffffffffffffff8116811461157a57600080fd5b919050565b60006020828403121561159157600080fd5b61046782611556565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156115dc57600080fd5b6115e583611556565b915060208084013567ffffffffffffffff8082111561160357600080fd5b818601915086601f83011261161757600080fd5b8135818111156116295761162961159a565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561166c5761166c61159a565b60405291825284820192508381018501918983111561168a57600080fd5b938501935b828510156116af576116a085611556565b8452938501939285019261168f565b8096505050505050509250929050565b6000602082840312156116d157600080fd5b5035919050565b600080604083850312156116eb57600080fd5b6116f483611556565b915061170260208401611556565b90509250929050565b60006020828403121561171d57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561176557611765611724565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117cb576117cb611724565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006020828403121561181357600080fd5b815160ff8116811461089057600080fd5b600181815b8085111561110257817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561186357611863611724565b8085161561187057918102915b93841c9390800290611829565b60008261188c5750600161046a565b816118995750600061046a565b81600181146118af57600281146118b9576118d5565b600191505061046a565b60ff8411156118ca576118ca611724565b50506001821b61046a565b5060208310610133831016604e8410600b84101617156118f8575081810a61046a565b6119028383611824565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561193457611934611724565b029392505050565b6000610467838361187d565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561198057611980611724565b500290565b6000821982111561199857611998611724565b500190565b600080604083850312156119b057600080fd5b505080516020909101519092909150565b600060ff821660ff8416808210156119db576119db611724565b90039392505050565b600061046760ff84168361187d56fea2646970667358221220db8a4244aeb08dbca3c8442eebb56ae0f0bfacd047b8e6ac3b3bbe1d602401ec64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c806385bb6a3c116100b2578063cd8e19c511610081578063e46a316d11610066578063e46a316d146102a1578063f2fde38b146102d7578063fe2ab286146102ea57600080fd5b8063cd8e19c51461027b578063db248cb91461028e57600080fd5b806385bb6a3c1461021f5780638da5cb5b14610242578063b74c9c8d14610260578063cc9ff6e11461026857600080fd5b80636ba01df81161010957806377a98d18116100ee57806377a98d18146101d15780638129fc1c146102045780638194fe9e1461020c57600080fd5b80636ba01df8146101b6578063715018a6146101c957600080fd5b8063032b1e941461013b57806328f25f9e14610150578063328123a2146101765780636ab55fd9146101ae575b600080fd5b61014e61014936600461157f565b6102fd565b005b61016361015e3660046115c9565b61045b565b6040519081526020015b60405180910390f35b6101896101843660046116bf565b610470565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161016d565b610163600681565b61014e6101c436600461157f565b6104a7565b61014e610616565b6101f46101df36600461157f565b60656020526000908152604090205460ff1681565b604051901515815260200161016d565b61014e61062a565b61016361021a36600461157f565b6107c1565b6101f461022d36600461157f565b60676020526000908152604090205460ff1681565b60335473ffffffffffffffffffffffffffffffffffffffff16610189565b610163610908565b61014e61027636600461157f565b6109d8565b61014e6102893660046116d8565b610c0c565b61018961029c3660046116bf565b610cb4565b6101896102af36600461157f565b60696020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61014e6102e536600461157f565b610cc4565b61014e6102f836600461157f565b610d78565b610305610dcc565b73ffffffffffffffffffffffffffffffffffffffff8116610352576040517f538ba4f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526065602052604090205460ff16156103b2576040517ff577854000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600081815260656020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556066805491820181559091527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943540180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b60006104678383610e4d565b90505b92915050565b6068818154811061048057600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6104af610dcc565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152606960205260409020541661050d576040517fae45917c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526067602052604090205460ff161561056d576040517ff577854000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600081815260676020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556068805491820181559091527fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c220977530180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b61061e610dcc565b6106286000610f76565b565b600054610100900460ff161580801561064a5750600054600160ff909116105b806106645750303b158015610664575060005460ff166001145b6106f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561075357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61075b610fed565b80156107be57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152606960205260408120549091168015610897576040517f8194fe9e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152821690638194fe9e9060240160206040518083038186803b15801561085857600080fd5b505afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610890919061170b565b9392505050565b6108908360688054806020026020016040519081016040528092919081815260200182805480156108fe57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116108d3575b5050505050610e4d565b600080805260696020527f5843af22e99e7c98370145a5056245c244ce8ee852f4ef5e6d6a8e410a18cf41546040517f8194fe9e0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff90911690638194fe9e9060240160206040518083038186803b15801561099b57600080fd5b505afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d3919061170b565b905090565b6109e0610dcc565b73ffffffffffffffffffffffffffffffffffffffff811660009081526067602052604090205460ff16610a3f576040517f60f4985300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260676020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b606854610a9a90600190611753565b811015610b9f57600060688281548110610ab657610ab661176a565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff90811691508316811415610b8c5760688054610af590600190611753565b81548110610b0557610b0561176a565b6000918252602090912001546068805473ffffffffffffffffffffffffffffffffffffffff9092169184908110610b3e57610b3e61176a565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610b9f565b5080610b9781611799565b915050610a8b565b506068805480610bb157610bb16117d2565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905550565b610c14610dcc565b73ffffffffffffffffffffffffffffffffffffffff8116610c61576040517f538ba4f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff918216600090815260696020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b6066818154811061048057600080fd5b610ccc610dcc565b73ffffffffffffffffffffffffffffffffffffffff8116610d6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106ec565b6107be81610f76565b610d80610dcc565b73ffffffffffffffffffffffffffffffffffffffff16600090815260696020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60335473ffffffffffffffffffffffffffffffffffffffff163314610628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ec565b6000806000610e5c858561108c565b915091508160001480610e6d575080155b15610e7d5760009250505061046a565b60008573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ec557600080fd5b505afa158015610ed9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efd9190611801565b60ff1690506012811015610f4a57610f4083610f1b6006600a61193c565b610f26846012611753565b610f3190600a61193c565b610f3b9086611948565b61110a565b935050505061046a565b610f40836012610f5b846006611985565b610f659190611753565b610f7090600a61193c565b8461110a565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106ec565b6106286111db565b60008060005b83518110156111025760008482815181106110af576110af61176a565b602002602001015190506000806110c6838961127b565b915091506110d4838361138a565b6110de9087611985565b95506110ea8186611985565b945050505080806110fa90611799565b915050611092565b509250929050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415611162576000841161115757600080fd5b508290049050610890565b80841161116e57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b600054610100900460ff16611272576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106ec565b61062833610f76565b60008060005b606654811015611102576000606682815481106112a0576112a061176a565b60009182526020822001546040517fcbc3ab5300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152888116602483015290911692508190839063cbc3ab5390604401604080518083038186803b15801561131f57600080fd5b505afa158015611333573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611357919061199d565b90925090506113668287611985565b95506113728186611985565b9450505050808061138290611799565b915050611281565b60008073ffffffffffffffffffffffffffffffffffffffff84161561142c578373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ef57600080fd5b505afa158015611403573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114279190611801565b61142f565b60125b73ffffffffffffffffffffffffffffffffffffffff8581166000818152606960205260408082205490517f8194fe9e00000000000000000000000000000000000000000000000000000000815260048101939093529394509290911690638194fe9e9060240160206040518083038186803b1580156114ad57600080fd5b505afa1580156114c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e5919061170b565b905060128260ff1611156115265761151d848260066115056012876119c1565b60ff166115129190611985565b610f3b90600a61193c565b9250505061046a565b61151d846115358460126119c1565b61154090600a6119e4565b61154a9084611948565b610f3b6006600a61193c565b803573ffffffffffffffffffffffffffffffffffffffff8116811461157a57600080fd5b919050565b60006020828403121561159157600080fd5b61046782611556565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156115dc57600080fd5b6115e583611556565b915060208084013567ffffffffffffffff8082111561160357600080fd5b818601915086601f83011261161757600080fd5b8135818111156116295761162961159a565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561166c5761166c61159a565b60405291825284820192508381018501918983111561168a57600080fd5b938501935b828510156116af576116a085611556565b8452938501939285019261168f565b8096505050505050509250929050565b6000602082840312156116d157600080fd5b5035919050565b600080604083850312156116eb57600080fd5b6116f483611556565b915061170260208401611556565b90509250929050565b60006020828403121561171d57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561176557611765611724565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117cb576117cb611724565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006020828403121561181357600080fd5b815160ff8116811461089057600080fd5b600181815b8085111561110257817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561186357611863611724565b8085161561187057918102915b93841c9390800290611829565b60008261188c5750600161046a565b816118995750600061046a565b81600181146118af57600281146118b9576118d5565b600191505061046a565b60ff8411156118ca576118ca611724565b50506001821b61046a565b5060208310610133831016604e8410600b84101617156118f8575081810a61046a565b6119028383611824565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561193457611934611724565b029392505050565b6000610467838361187d565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561198057611980611724565b500290565b6000821982111561199857611998611724565b500190565b600080604083850312156119b057600080fd5b505080516020909101519092909150565b600060ff821660ff8416808210156119db576119db611724565b90039392505050565b600061046760ff84168361187d56fea2646970667358221220db8a4244aeb08dbca3c8442eebb56ae0f0bfacd047b8e6ac3b3bbe1d602401ec64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "consultPrice(address)": {
        "details": "(클레이 / DAI / USDC / USDT)와의 페어 풀이 하나도 없는 경우, 가격은 0으로 나옵니다",
        "params": {
          "token": "조회할 토큰의 주소"
        }
      },
      "consultPriceFrom(address,address[])": {
        "details": "(클레이 / DAI / USDC / USDT)와의 페어 풀이 하나도 없는 경우, referenceToken과의 페어풀을 바탕으로 가격을 추론합니다",
        "params": {
          "token": "조회할 토큰의 주소"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "DECIMAL": {
        "details": "예시로 price = 700574인 경우, 0.700574$ 을 의미"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DECIMAL()": {
        "notice": "dollar 환산 시 unit, (units = 6)"
      },
      "consultKlayPrice()": {
        "notice": "클레이의 가격 가져오기 (units : 10 ^ -6 $)"
      },
      "consultPrice(address)": {
        "notice": "토큰의 price 가져오기 (units : 10 ^ -6 $)"
      },
      "consultPriceFrom(address,address[])": {
        "notice": "referenceToken 가격을 바탕으로 토큰의 price 가져오기 (units : 10 ^ -6 $)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 566,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 708,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "isPairReserve",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 711,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "pairReserves",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 715,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "isBaseToken",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 718,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "baseTokens",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 722,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "tokenPriceOracles",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}